@using System
@using System.Linq
@using System.Text
<p>
    Get Nth prime: <input type="number" bind=@NumberIndex />
    Experiments count <input type="number" bind=@ExperimentsCount />
    Show results <input type="checkbox" bind=@ShowResults />
    Skip count <input type="number" bind=@SkipCount />
    <button class="btn btn-primary" onclick="@(() => Compute())">Compute</button>
    <button class="btn btn-primary" onclick="@GetStats">Get stats</button>
    <button class="btn btn-primary" onclick="@Clear">Clear</button>
</p>

<p>
    Output:
    <pre>@Log</pre>
</p>

@functions {
    int NumberIndex = 10;
    int ExperimentsCount = 10;
    bool ShowResults = false;
    int SkipCount = 3;
    string Log { get; set; }

    [Parameter]
    Func<int, double> Action { get; set; }

    void Clear()
    {
        Log = string.Empty;
    }

    void GetStats()
    {
        var parts = 20;
        var stats = new StringBuilder();

        var indexes = Enumerable.Range(0, parts + 1)
            .Select(x => NumberIndex / parts * x);

        foreach (var index in indexes)
        {
            var result = Compute(index);

            stats.AppendLine($"{index}\t{result}");
        }

        Log += "\n" + stats;
    }

    double Compute(int? index = null)
    {
        var time = new List<double>();
        var logBuilder = new StringBuilder();

        foreach (var i in Enumerable.Range(0, ExperimentsCount))
        {
            var start = DateTime.Now;
            var result = Action(index ?? NumberIndex);
            var duration = (DateTime.Now - start).TotalMilliseconds;

            logBuilder.Append($"The {NumberIndex}th prime is: {result} (time: {duration} ms)");

            if (i < SkipCount)
            {
                logBuilder.Append("\tSkipped!");
            }
            else
            {
                time.Add(duration);
            }

            logBuilder.AppendLine();
        }

        if (!ShowResults)
        {
            logBuilder.Clear();
        }

        var mean = time.Average();
        var deviation = Math.Sqrt(time.Average(d => (d - mean) * (d - mean)));
        var rate = deviation / mean;

        Log += "\n"
               + logBuilder
               + $"NumberIndex mean: {mean:F2} ms, deviation: {deviation:F2} ms, rate {rate * 100:F2}%";

        return mean;
    }
}