<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard1.0</TargetFramework>
    <PackageVersion>0.8.0-preview1-ilwasm-002</PackageVersion>
    <PackageOutputPath>$(MSBuildThisFileDirectory)..\artifacts</PackageOutputPath>
  </PropertyGroup>

  <!-- Pack settings -->
  <Target Name="_SetNuSpecProperties" BeforeTargets="_IntermediatePack">
    <PropertyGroup>
      <NoPackageAnalysis>true</NoPackageAnalysis>
      <NuspecFile>Microsoft.AspNetCore.Blazor.Mono.nuspec</NuspecFile>
      <NuspecProperties>
        version=$(PackageVersion);
      </NuspecProperties>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <MonoIncomingDir>$(MSBuildThisFileDirectory)incoming\</MonoIncomingDir>
    <MonoDistDir>$(MSBuildThisFileDirectory)dist\</MonoDistDir>
    <BclWipeSpecDir>$(MSBuildThisFileDirectory)bclwipe\</BclWipeSpecDir>
  </PropertyGroup>

  <ItemGroup>
    <WasmItemsToCopy Include="$(MonoIncomingDir)wasm\**" />
    <BclItemsToCopy Include="$(MonoIncomingDir)bcl\**" />
    <BclWipeSpecFiles Include="$(BclWipeSpecDir)**" />
  </ItemGroup>

  <Target Name="OptimizeMono" DependsOnTargets="OptimizeMonoWasm; OptimizeBcl" BeforeTargets="Build" />

  <Target Name="OptimizeMonoWasm" Inputs="@(WasmItemsToCopy)" Outputs="@(WasmItemsToCopy->'$(MonoDistDir)wasm\%(RecursiveDir)%(FileName)%(Extension)')">
    <!-- TODO: Implement WASM code stripping like in prototype -->
    <Message Importance="High" Text="Creating optimized Mono WebAssembly build" />
    <Copy SourceFiles="@(WasmItemsToCopy)" DestinationFiles="@(WasmItemsToCopy->'$(MonoDistDir)wasm\%(RecursiveDir)%(FileName)%(Extension)')" />
  </Target>

  <Target Name="OptimizeBcl" Inputs="@(BclItemsToCopy);@(BclWipeSpecFiles)" Outputs="@(BclItemsToCopy->'$(MonoDistDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')">
    <Message Importance="High" Text="Creating optimized BCL build" />
    <Copy SourceFiles="@(BclItemsToCopy)" DestinationFiles="@(BclItemsToCopy->'$(MonoDistDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')">
      <Output TaskParameter="CopiedFiles" ItemName="_BclFilesCopied" />
    </Copy>
    <!--<Exec Command="$(BlazorBuildToolsExe) ilwipe -s &quot;$(BclWipeSpecDir.TrimEnd('\'))&quot; -i &quot;$(MonoIncomingDir)bcl&quot; -o &quot;$(MonoDistDir)bcl&quot;" />-->
    <Touch Files="@(_BclFilesCopied)" /> <!-- Make incremental builds work -->
  </Target>

  <Target Name="BuildMonoEmcc">
    <PropertyGroup>
      <CommonEmccArgs>-Oz --llvm-opts 2 --llvm-lto 1 -I . -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s BINARYEN=1 -s "BINARYEN_TRAP_MODE='clamp'" -s TOTAL_MEMORY=134217728 -s ALIASING_FUNCTION_POINTERS=0  --js-library library_mono.js --js-library dotnet_support.js driver.c libmonosgen-2.0.a libmono-ee-interp.a libmono-icall-table.a libmono-ilgen.a -s NO_EXIT_RUNTIME=1 -s "EXTRA_EXPORTED_RUNTIME_METHODS=['ccall', 'FS_createPath', 'FS_createDataFile', 'cwrap', 'setValue', 'getValue', 'UTF8ToString']"</CommonEmccArgs>
    </PropertyGroup>

    <!--
      Build WASM version of Mono.
      This does not run on every build - it only runs if you explicitly call "dotnet msbuild mono.csproj /t:BuildMonoEmcc"
      For it to succeed, you need to run in a command prompt that has emcc already activated.
    -->
    <Message Importance="high" Text="Building mono.wasm..." />
    <Exec WorkingDirectory="$(MonoIncomingDir)mono-ci-output\" Command="emcc $(CommonEmccArgs) -s &quot;BINARYEN_METHOD='native-wasm'&quot; -o $(MonoIncomingDir)wasm\mono.js" />

    <!-- These files are not needed -->
    <Delete Files="$(MonoIncomingDir)wasm\mono.js.map" />
    <Delete Files="$(MonoIncomingDir)wasm\mono.wast" />
  </Target>

</Project>
